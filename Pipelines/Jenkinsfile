@Library('gx-library')

import com.genexus.FileHelper

pipeline {
    agent { node { label 'kbbuilder-node-6' } }
    environment {
        String gitUrl = 'https://github.com/genexuslabs/KBBuilder-GeneXusServer.git'
        String gitBranch = 'production' 
        String gitCredentialsId = 'genexuslabs_github' 
        String propertiesFilePath = 'gxserveroperatorsaas-app/build.properties'
        String machineFilePath = 'gxserveroperatorsaas-app/buildernode.properties'
        def projectProps
        def machineProps
    }
    stages {
        stage('Setup parameters') {
            steps {
                script { 
                    properties([
                        parameters([
                            booleanParam(defaultValue: false, description: 'Force rebuild', name: 'forceRebuild'),
                            booleanParam(defaultValue: false, description: 'Force update GeneXus Installation', name: 'forceUpdateGX')
                        ]),
                        disableConcurrentBuilds(),
                        buildDiscarder(logRotator(numToKeepStr: '10'))
                    ])
                }
            }
        }
        stage('Read Project Properties') {
            steps {
                script { 
                    git url: gitUrl, 
                        branch: gitBranch, 
                        credentialsId: gitCredentialsId, 
                        changelog: false, 
                        poll: false

                    fileHelper = new FileHelper()
                    projectProps = readProperties file: propertiesFilePath;
                    machineProps = readProperties file: machineFilePath;
                    String msbuildExePath  = fileHelper.joinPath(machineProps.msbuildInstallationPath, "msbuild.exe")
                    projectProps.msbuildExePath = msbuildExePath
                    echo "INFO MSBuild:: ${msbuildExePath}"
                    String localGXPath = fileHelper.getAbsolutePathFromWS('\\..\\genexus')
                    echo "INFO GeneXus Installation:: ${localGXPath}"
                    projectProps.localGXPath = localGXPath
                    String localAndroidSDKPath = false
                    if(projectProps.genexusNeedAndroidSDK) {
                        localAndroidSDKPath = fileHelper.getAbsolutePathFromWS('\\..\\AndroidSDK')
                        echo "INFO AndroidSDK:: ${localAndroidSDKPath}"
                        projectProps.localAndroidSDKPath = localAndroidSDKPath
                    }
                    String localKBPath = fileHelper.getAbsolutePathFromWS('\\..\\kb\\' + projectProps.gxserverKB)
                    echo "INFO KnowledgeBase:: ${localKBPath}"
                    projectProps.localKBPath = localKBPath
                }
            }
        }
        stage('Configure GeneXus Installation') {
            steps {
                installGeneXusUsingURI projectProps machineProps params.forceUpdateGX
            }
        }
        stage('Checkout/Update KnowledgeBase') {
            steps {
                gxserver changelog: true, poll: true,
                    gxCustomPath: "${localGXPath}",
                    msbuildCustomPath: "${machineProps.msbuildInstallationPath}",
                    serverURL: buildProperties.gxserverURL,
                    credentialsId: buildProperties.gxserverCredentials,
                    kbName: buildProperties.gxserverKB,
                    kbVersion: buildProperties.gxserverVersion,
                    kbDbServerInstance: "${machineProps.kbDbServerInstance}",
                    localKbPath: "${localKBPath}",
                    localKbVersion: buildProperties.gxserverKB
            }
        }
         stage("Read Environment Properties") {
             /*
            environmentDefinition = file.readYamlFile(environmentFile.path)
            String propsFile = genexusTarget.getKBEnvironmentProperties(msbuildExePath, customMSBuildScript, localGXPath, localKBPath, environmentDefinition.name)
            commiteableEnvironmentProp = file.readJsonFile(propsFile)
            */
            projectProps.envTargetPath = localKBPath
            projectProps.envData = localKBPath

            projectProps.targetPath = "NETSQLServer002"
            projectProps.dataSource = "SQL Server"
            projectProps.generator = ".NET"
        }
        stage('Process Reorganization') {
            steps {
                configDefaultDataStore projectProps
                /*
                Boolean pendingReorg = checkPendingReorg 
                reorganizeDatabase
                exportReorganization
                */
            }
        }
        /*
        stage('Build KnowledgeBase') {
            steps {
                jobHandleGeneXusInstallation "Calling handle gx instalaltion"
            }
        }
        stage('Execute Unit Tests') {
            steps {
                jobHandleGeneXusInstallation "Calling handle gx instalaltion"
            }
        }
        */
    }
}