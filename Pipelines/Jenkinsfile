@Library('gx-library@jalbarellos') _

def projectDefinition = [:]
pipeline {
    agent { node { label 'kbbuilder-node-6' } }
    environment {
        String gitUrl = 'https://github.com/genexuslabs/KBBuilder-GeneXusServer.git'
        String gitBranch = 'production' 
        String gitCredentialsId = 'genexuslabs_github' 
        String propertiesFilePath = 'genexuskbbuildermanager-app/build.properties'
        String machineFilePath = 'genexuskbbuildermanager-app/buildernode.properties'
    }
    stages {
        stage('Set pipeline preferences') {
            steps {
                properties([
                    parameters([
                        booleanParam(defaultValue: false, description: 'Force rebuild', name: 'forceRebuild'),
                        booleanParam(defaultValue: false, description: 'Force update GeneXus Installation', name: 'forceUpdateGX')
                    ]),
                    // Discard old builds (10)
                    buildDiscarder(logRotator(numToKeepStr: '10')),
                    // Do not allow concurrent builds
                    disableConcurrentBuilds() //,
                    // Config Poll SCM
                    //pipelineTriggers([pollSCM('H/5 * * * *')])
                ])
            }
        }
        stage('Read Project Properties') {
            steps {
                script {
                    projectDefinition = readPipelineProperties(gitUrl: env.gitUrl, gitBranch: env.gitBranch, gitCredentialsId: env.gitCredentialsId, propertiesFilePath: env.propertiesFilePath, machineFilePath: env.machineFilePath)
                    projectDefinition.forceUpdateGX = params.forceUpdateGX
                }
            }
        }
        stage('Configure GeneXus Installation') {
            steps {
                script {
                    installGeneXusUsingURI(projectDefinition)
                }
            }
        }
        stage("Checkout/Update Knowledge Base") {
            steps {
                script {
                    gxserver changelog: true, poll: true,
                        gxCustomPath: "${projectDefinition.localGXPath}",
                        msbuildCustomPath: "${projectDefinition.msbuildInstallationPath}",
                        serverURL: projectDefinition.gxserverURL,
                        credentialsId: projectDefinition.gxserverCredentials,
                        kbName: projectDefinition.gxserverKB,
                        kbVersion: projectDefinition.gxserverVersion,
                        kbDbServerInstance: "${projectDefinition.kbDbServerInstance}",
                        localKbPath: "${projectDefinition.localKBPath}",
                        localKbVersion: projectDefinition.gxserverKB
                }
            }
        }
        stage("Read Environment Properties") {
            steps {
                script {
                    projectDefinition = readCommiteableProperties(projectDefinition)
                }
            }
        }
        stage('Process Reorganization') {
            steps {
                script {
                    configureDataStore(projectDefinition, 'Default')
                    Boolean pendingReorg = checkPendingReorg(projectDefinition)
                    echo " READ pendingReorg::::${pendingReorg}"
                    if(pendingReorg) {
                        reorganizeDatabase(projectDefinition)
                        String reorgExportPath = "${projectDefinition.localKBPath}\\${projectDefinition.targetPath}\\Deploy\\AppliedReorganizations\\${env.BUILD_NUMBER}_Reorganization"
                        exportReorganization(projectDefinition, reorgExportPath)
                    }
                }
            }
        }
        stage('Configure GAM Datastore') {
            steps {
                script {
                    configureDataStore(projectDefinition, 'GAM')
                }
            }
        }
        stage('Build KnowledgeBase') {
            steps {
                script {
                    projectDefinition.forceRebuild = params.forceRebuild
                    buildKnowledgeBase(projectDefinition)
                }
            }
        }
    }
}